class MaintenanceTicket {
    status {
        Open {
            assign(HotelStaff ticketFixer, PriorityLevel priority, TimeEstimate timeToResolve, Manager fixApprover) / {
                doAssign(ticketFixer, priority, timeToResolve, fixApprover);
            } -> Assigned;

            start() / {
                rejectTicketAction("start", "open");
            } -> Open;

            complete() / {
                rejectTicketAction("complete", "open");
            } -> Open;

            disapprove() / {
                rejectTicketAction("disapprove", "open");
            } -> Open;

            approve() / {
                rejectTicketAction("approve", "open");
            } -> Open;
        }
        Assigned {
            assign(HotelStaff ticketFixer, PriorityLevel priority, TimeEstimate timeToResolve, Manager fixApprover) / {
                rejectRedundantAction("assigned");
            } -> Assigned;

            start() -> InProgress;

            complete() / {
                rejectTicketAction("complete", "assigned");
            } -> Assigned;

            disapprove() / {
                rejectTicketAction("disapprove", "assigned");
            } -> Assigned;

            approve() / {
                rejectTicketAction("approve", "assigned");
            } -> Assigned;
        }
        InProgress {
            assign(HotelStaff ticketFixer, PriorityLevel priority, TimeEstimate timeToResolve, Manager fixApprover) / {
                rejectTicketAction("assign", "in progress");
            } -> InProgress;

            start() / {
                rejectRedundantAction("in progress");
            } -> InProgress;

            complete() [hasFixApprover()] -> Resolved;

            complete() [!hasFixApprover()] -> Closed;

            disapprove() / {
                rejectTicketAction("disapprove", "in progress");
            } -> InProgress;

            approve() / {
                rejectTicketAction("approve", "in progress");
            } -> InProgress;
        }
        Resolved {
            assign(HotelStaff ticketFixer, PriorityLevel priority, TimeEstimate timeToResolve, Manager fixApprover) / {
                rejectTicketAction("assign", "resolved");
            } -> Resolved;

            start() / {
                rejectTicketAction("start", "resolved");
            } -> Resolved;

            complete() / {
                rejectRedundantAction("resolved");
            } -> Resolved;

            approve() -> Closed;

            disapprove(Date date, String reason, Manager fixApprover) / {
                doDisapprove(date, reason, fixApprover);
            } -> InProgress;
        }
        Closed {
            assign(HotelStaff ticketFixer, PriorityLevel priority, TimeEstimate timeToResolve, Manager fixApprover) / {
                rejectTicketAction("assign", "closed");
            } -> Closed;

            start() / {
                rejectTicketAction("start", "closed");
            } -> Closed;

            complete() / {
                rejectRedundantAction("closed");
            } -> Closed;

            disapprove() / {
                rejectTicketAction("disapprove", "closed");
            } -> Closed;

            approve() / {
                rejectRedundantAction("closed");
            } -> Closed;
        }
    }

    /**
    * @author William Wang
    */
    private void doAssign(HotelStaff ticketFixer, PriorityLevel priority, TimeEstimate timeToResolve, Manager fixApprover) {
        if (ticketFixer != null) {
            setTicketFixer(ticketFixer);
        }
        setPriority(priority);
        setTimeToResolve(timeToResolve);
        if (fixApprover != null)
            setFixApprover(fixApprover);
    }

    private void doDisapprove(Date date, String reason, Manager fixApprover) {
        addTicketNote(date, reason, fixApprover);
    }

    private void rejectTicketAction(String action, String reason) {
        throw new RuntimeException("Cannot " + action + " a maintenance ticket which is " + reason + ".");
    }

    private void rejectRedundantAction(String reason) {
        throw new RuntimeException("The maintenance ticket is already " + reason + ".");
    }
}